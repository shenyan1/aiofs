/* The method to read/write for user
 */
#ifndef __RFSIO_H
#define __RFSIO_H
#include"lfs.h"
#include<assert.h>
#include<inttypes.h>
#define READ_SIZE (sizeof(char)+sizeof(int)+sizeof(int)+sizeof(uint64_t)+sizeof(uint64_t)+1)
/*READ protocol: READ(1B)     |Inode(4B)  |SHMID(4B)  |offset(8B)      |size(8B)*/
int decode_readprotocol (char *pro);
int rfs_write (int id, char *buffer, uint64_t size, uint64_t offset);
int rfs_read (int id, char *buffer, uint64_t size, uint64_t offset);
char *id2protocol (int shmid);
/* rfs_return_data: return the protocol (error code or data) to client.
 * 
 */
int rfs_return_data (char *proto, int len, int clifd);
/* return current files in rfs.
 * fsid is reserved for future.
 */
int cur_files (int fsid);

/* create rfs file.
 */
int rfs_create (char *fname);
/* return whether the file is free.
 */
int fdisfree (int fid);
inode_t rfs_rmdir (char *fname);
inode_t rfs_mkdir (char *fname);
inode_t rfs_ls (char *fname);
inode_t rfs_open (char *fname);
#endif
