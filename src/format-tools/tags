!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASSERT	lfs.1.h	73;"	d
ASSERT	lfs.h	60;"	d
AVG_FSIZE	lfs.1.h	62;"	d
AVG_FSIZE	lfs.h	49;"	d
AVL_DATA2NODE	avl_impl.h	129;"	d
AVL_INDEX2CHILD	avl_impl.h	137;"	d
AVL_INDEX2NODE	avl_impl.h	136;"	d
AVL_MKINDEX	avl_impl.h	138;"	d
AVL_NODE2DATA	avl_impl.h	128;"	d
AVL_SETBALANCE	avl_impl.h	117;"	d
AVL_SETBALANCE	avl_impl.h	75;"	d
AVL_SETCHILD	avl_impl.h	108;"	d
AVL_SETCHILD	avl_impl.h	72;"	d
AVL_SETPARENT	avl_impl.h	101;"	d
AVL_SETPARENT	avl_impl.h	69;"	d
AVL_XBALANCE	avl_impl.h	116;"	d
AVL_XBALANCE	avl_impl.h	74;"	d
AVL_XCHILD	avl_impl.h	107;"	d
AVL_XCHILD	avl_impl.h	71;"	d
AVL_XPARENT	avl_impl.h	100;"	d
AVL_XPARENT	avl_impl.h	68;"	d
BLKPTRSIZE	lfs_format.c	123;"	d	file:
BLKSHIFT	lfs.1.h	72;"	d
BLKSHIFT	lfs.h	59;"	d
CC	Makefile	/^CC    = gcc$/;"	m
CCFLAGS	Makefile	/^CCFLAGS = -g -Wall -O0$/;"	m
FILE_ENTRYS	lfs.1.h	64;"	d
FILE_ENTRYS	lfs.h	51;"	d
FSNAME	lfs.1.h	50;"	d
FSNAME	lfs.h	37;"	d
FormatFSinformation	lfs_format.c	/^FormatFSinformation (int fd)$/;"	f
FormatFileEntry	lfs_format.c	/^FormatFileEntry (int fd)$/;"	f
FormatSpaceEntry	lfs_format.c	/^FormatSpaceEntry (int fd)$/;"	f
LFS_BLKSIZE	lfs.1.h	80;"	d
LFS_BLKSIZE	lfs.h	67;"	d
LFS_DATA_DOMAIN	lfs.1.h	60;"	d
LFS_DATA_DOMAIN	lfs.h	47;"	d
LFS_DATA_DOMAIN1	lfs.1.h	59;"	d
LFS_DATA_DOMAIN1	lfs.h	46;"	d
LFS_EBIG	lfs_err.h	5;"	d
LFS_EBOUND	lfs_err.h	6;"	d
LFS_ENOSPC	lfs_err.h	8;"	d
LFS_EOPEN	lfs_err.h	7;"	d
LFS_EPM	lfs_err.h	9;"	d
LFS_FILE_ENTRY	lfs.1.h	54;"	d
LFS_FILE_ENTRY	lfs.h	41;"	d
LFS_FREE	lfs.1.h	66;"	d
LFS_FREE	lfs.h	53;"	d
LFS_NFREE	lfs.1.h	68;"	d
LFS_NFREE	lfs.h	55;"	d
LFS_SPACE_ENTRY	lfs.1.h	56;"	d
LFS_SPACE_ENTRY	lfs.h	43;"	d
LFS_SUCCESS	lfs_err.h	4;"	d
LIBS	Makefile	/^LIBS  = -lpthread$/;"	m
LoadFileEntry	tools.c	/^int LoadFileEntry ()$/;"	f
MAX	lfs.1.h	78;"	d
MAX	lfs.h	65;"	d
MAX_FILES	lfs.1.h	55;"	d
MAX_FILES	lfs.h	42;"	d
MAX_FILE_NO	lfs.1.h	52;"	d
MAX_FILE_NO	lfs.h	39;"	d
MAX_FSIZE	lfs.1.h	70;"	d
MAX_FSIZE	lfs.h	57;"	d
MIN	lfs.1.h	77;"	d
MIN	lfs.h	64;"	d
MTX_DEST	lfs_thread.h	5;"	d
MTX_INIT	lfs_thread.h	4;"	d
MTX_MAGIC	lfs_thread.h	3;"	d
MUTEX_DEFAULT	lfs_thread.h	6;"	d
OBJS	Makefile	/^OBJS  = $(SRCS:.c=.o)$/;"	m
OBJ_INIT	lfs_thread.h	12;"	d
OBJ_LOCK	lfs_thread.h	10;"	d
OBJ_UNLOCK	lfs_thread.h	11;"	d
P2ALIGN	lfs.1.h	58;"	d
P2ALIGN	lfs.h	45;"	d
P2ROUNDUP	lfs.1.h	57;"	d
P2ROUNDUP	lfs.h	44;"	d
PROGS	Makefile	/^PROGS = lfs_load$/;"	m
RW_READER	lfs_thread.h	8;"	d
RW_WRITER	lfs_thread.h	9;"	d
SRCS	Makefile	/^SRCS  = $(wildcard *.c)$/;"	m
VERIFY	lfs.1.h	75;"	d
VERIFY	lfs.h	62;"	d
VERSION	lfs.1.h	51;"	d
VERSION	lfs.h	38;"	d
_AVL_IMPL_H	avl_impl.h	28;"	d
_LFS_H	lfs.1.h	2;"	d
_LFS_H	lfs.h	2;"	d
_LFS_THREAD_H	lfs_thread.h	2;"	d
_XOPEN_SOURCE	tools.c	2;"	d	file:
__LFS_ERR_H	lfs_err.h	2;"	d
arc_cache	lfs.1.h	/^	arc_t *arc_cache;$/;"	m	struct:lfs_info
arc_hash	lfs.c	/^arc_hash (uint64_t id, uint64_t offset)$/;"	f
avl_balance	avl_impl.h	/^	short avl_balance;		\/* balance value: -1, 0, +1 *\/$/;"	m	struct:avl_node
avl_child	avl_impl.h	/^	struct avl_node *avl_child[2];	\/* left\/right children *\/$/;"	m	struct:avl_node	typeref:struct:avl_node::avl_node
avl_child	avl_impl.h	/^	struct avl_node *avl_child[2];	\/* left\/right children nodes *\/$/;"	m	struct:avl_node	typeref:struct:avl_node::avl_node
avl_child_index	avl_impl.h	/^	unsigned short avl_child_index;	\/* my index in parent's avl_child[] *\/$/;"	m	struct:avl_node
avl_compar	avl_impl.h	/^	int (*avl_compar)(const void *, const void *);$/;"	m	struct:avl_tree
avl_node	avl_impl.h	/^struct avl_node {$/;"	s
avl_numnodes	avl_impl.h	/^	ulong_t avl_numnodes;		\/* number of nodes in the tree *\/$/;"	m	struct:avl_tree
avl_offset	avl_impl.h	/^	size_t avl_offset;		\/* offsetof(type, avl_link_t field) *\/$/;"	m	struct:avl_tree
avl_parent	avl_impl.h	/^	struct avl_node *avl_parent;	\/* this node's parent *\/$/;"	m	struct:avl_node	typeref:struct:avl_node::avl_node
avl_pcb	avl_impl.h	/^	uintptr_t avl_pcb;		\/* parent, child_index, balance *\/$/;"	m	struct:avl_node
avl_root	avl_impl.h	/^	struct avl_node *avl_root;	\/* root node in tree *\/$/;"	m	struct:avl_tree	typeref:struct:avl_tree::avl_node
avl_size	avl_impl.h	/^	size_t avl_size;		\/* sizeof user type struct *\/$/;"	m	struct:avl_tree
avl_tree	avl_impl.h	/^struct avl_tree {$/;"	s
block_device	lfs.1.h	/^	char *block_device;$/;"	m	struct:lfs_info
block_device	lfs.h	/^	char *block_device;$/;"	m	struct:lfs_info
f_table	lfs.1.h	/^	file_entry_t *f_table;$/;"	m	struct:lfs_info
f_table	lfs.h	/^	file_entry_t *f_table;$/;"	m	struct:lfs_info
false	lfs.1.h	8;"	d
false	lfs.h	5;"	d
fd	lfs.1.h	/^	int fd;$/;"	m	struct:lfs_info
fd	lfs.h	/^	int fd;$/;"	m	struct:lfs_info
fidx	lfs_format.c	/^int fidx = 0;$/;"	v
file_entry	lfs.1.h	/^typedef struct file_entry{$/;"	s
file_entry	lfs.h	/^typedef struct file_entry{$/;"	s
file_entry_t	lfs.1.h	/^}file_entry_t;$/;"	t	typeref:struct:file_entry
file_entry_t	lfs.h	/^}file_entry_t;$/;"	t	typeref:struct:file_entry
filename	lfs.1.h	/^	char filename[8];$/;"	m	struct:file_entry
filename	lfs.h	/^	char filename[8];$/;"	m	struct:file_entry
freemap	lfs.1.h	/^	uint64_t *freemap;$/;"	m	struct:lfs_info
freemap	lfs.h	/^	uint64_t *freemap;$/;"	m	struct:lfs_info
freemap	lfs_format.c	/^uint64_t *freemap;$/;"	v
fsize	lfs.1.h	/^	uint32_t fsize;$/;"	m	struct:file_entry
fsize	lfs.h	/^	uint32_t fsize;$/;"	m	struct:file_entry
getFilesize	lfs_format.c	/^getFilesize (char *str)$/;"	f
getlocalp	lfs.c	/^getlocalp (uint64_t id)$/;"	f
getmaxfiles	lfs_format.c	/^getmaxfiles ()$/;"	f
getphymemsize	lfs.c	/^getphymemsize ()$/;"	f
getphymemsize	lfs_format.c	/^getphymemsize ()$/;"	f
is_free	lfs.1.h	/^	uint32_t is_free;   $/;"	m	struct:file_entry
is_free	lfs.h	/^	uint32_t is_free;   $/;"	m	struct:file_entry
kmutex	lfs.1.h	/^typedef struct kmutex {$/;"	s
kmutex	lfs.h	/^typedef struct kmutex {$/;"	s
kmutex_t	lfs.1.h	/^} kmutex_t;$/;"	t	typeref:struct:kmutex
kmutex_t	lfs.h	/^} kmutex_t;$/;"	t	typeref:struct:kmutex
lfs_cache	lfs.1.h	/^	cache_t *lfs_cache;$/;"	m	struct:lfs_info
lfs_fini	tools.c	/^lfs_fini ()$/;"	f
lfs_get_files	tools.c	/^void lfs_get_files(){$/;"	f
lfs_info	lfs.1.h	/^typedef struct lfs_info{$/;"	s
lfs_info	lfs.h	/^typedef struct lfs_info{$/;"	s
lfs_info_t	lfs.1.h	/^}lfs_info_t;$/;"	t	typeref:struct:lfs_info
lfs_info_t	lfs.h	/^}lfs_info_t;$/;"	t	typeref:struct:lfs_info
lfs_init	tools.c	/^lfs_init ()$/;"	f
lfs_mutex	lfs.c	/^lfs_mutex (pthread_mutex_t * lock)$/;"	f
lfs_n	tools.c	/^lfs_info_t lfs_n;$/;"	v
lfs_obj_cache	lfs.1.h	/^	cache_t *lfs_obj_cache;$/;"	m	struct:lfs_info
lfs_param	tools.c	/^lfs_param (char *argv[])$/;"	f
lfs_unmutex	lfs.c	/^lfs_unmutex (pthread_mutex_t * lock)$/;"	f
m_lock	lfs.1.h	/^	pthread_mutex_t	m_lock;$/;"	m	struct:kmutex
m_lock	lfs.h	/^	pthread_mutex_t	m_lock;$/;"	m	struct:kmutex
m_magic	lfs.1.h	/^	uint64_t	m_magic;$/;"	m	struct:kmutex
m_magic	lfs.h	/^	uint64_t	m_magic;$/;"	m	struct:kmutex
m_owner	lfs.1.h	/^	void		*m_owner;$/;"	m	struct:kmutex
m_owner	lfs.h	/^	void		*m_owner;$/;"	m	struct:kmutex
main	lfs_format.c	/^main (int argc, char *argv[])$/;"	f
main	tools.c	/^main (int argc, char *argv[])$/;"	f
max_files	lfs.1.h	/^	uint32_t max_files;$/;"	m	struct:lfs_info
max_files	lfs.h	/^	uint32_t max_files;$/;"	m	struct:lfs_info
meta_table	lfs.1.h	/^	uint64_t *meta_table;$/;"	m	struct:file_entry
meta_table	lfs.h	/^	uint64_t *meta_table;$/;"	m	struct:file_entry
off	lfs.1.h	/^	uint64_t off;$/;"	m	struct:lfs_info
off	lfs.h	/^	uint64_t off;$/;"	m	struct:lfs_info
root	lfs.1.h	/^	avl_tree_t *root;$/;"	m	struct:lfs_info
sarc_cache	lfs.1.h	/^	sarc_t *sarc_cache;$/;"	m	struct:lfs_info
tot_size	lfs_format.c	/^uint64_t tot_size = 0;$/;"	v
true	lfs.1.h	7;"	d
true	lfs.h	4;"	d
uintptr_t	avl_impl.h	/^typedef unsigned long			uintptr_t;$/;"	t
ulong_t	avl_impl.h	/^typedef unsigned long ulong_t;$/;"	t
